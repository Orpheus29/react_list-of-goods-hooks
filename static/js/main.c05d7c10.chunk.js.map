{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","SortByName","SortByLength","ReverseOrder","DefaultOption","isNameSelected","isLengthSelected","isReverseSelected","App","useState","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","reverseSelection","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,sBAAAA,E,sBAAAA,E,wBAAAA,E,kBAAAA,M,KAOL,IACEE,EAIEF,EAJFE,WACAC,EAGEH,EAHFG,aACAC,EAEEJ,EAFFI,aACAC,EACEL,EADFK,cAGEC,GAAiB,EACjBC,GAAmB,EACnBC,GAAoB,EAiCjB,IAAMC,EAAM,WACjB,MAAkCC,mBAASL,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAASL,GAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KACMC,EAlCR,SACEC,EACAL,EACAM,GAEA,IAAMC,EAAa,YAAOF,GAuB1B,OArBAE,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKT,EAIH,OAHAI,GAAiB,EACjBC,GAAmB,EAEZa,EAAME,cAAcD,GAC7B,KAAKlB,EAIH,OAHAI,GAAmB,EACnBD,GAAiB,EAEVc,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,MAITN,GACFC,EAAcM,UAGTN,EAMcO,CACnBxB,EACAU,EACAH,GAGF,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaV,IAC5B0B,KAAK,SACLF,UAAWG,IACT,SAAU,UAAW,CACnB,YAAavB,IALnB,iCAYA,wBACEqB,QAAS,kBAAMf,EAAaT,IAC5ByB,KAAK,SACLF,UAAWG,IACT,SAAU,aAAc,CACtB,YAAatB,IALnB,4BAYA,wBACEoB,QAAS,WAEPb,GADAN,GAAqBA,GAEjBJ,EACAC,IAENuB,KAAK,SACLF,UAAWG,IACT,SAAU,aAAc,CACtB,YAAarB,IAVnB,sBAiBEG,GAAaE,IAEX,wBACEc,QAAS,WACPf,EAAaP,GACbS,EAAgBT,GAChBC,GAAiB,EACjBC,GAAmB,EACnBC,GAAoB,GAEtBoB,KAAK,SACLF,UAAU,4BATZ,sBAgBN,6BACGX,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC1IjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c05d7c10.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SortByName = 'alphabet',\n  SortByLength = 'length',\n  ReverseOrder = 'reversed',\n  DefaultOption = '',\n}\n\nconst {\n  SortByName,\n  SortByLength,\n  ReverseOrder,\n  DefaultOption,\n} = SortType;\n\nlet isNameSelected = false;\nlet isLengthSelected = false;\nlet isReverseSelected = false;\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  reverseSelection: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  preparedGoods.sort((good1, good2) => {\n    switch (sortField) {\n      case SortByName:\n        isNameSelected = true;\n        isLengthSelected = false;\n\n        return good1.localeCompare(good2);\n      case SortByLength:\n        isLengthSelected = true;\n        isNameSelected = false;\n\n        return good1.length - good2.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (reverseSelection) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(DefaultOption);\n  const [reverseField, setReverseField] = useState(DefaultOption);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    isReverseSelected,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortByName)}\n          type=\"button\"\n          className={cn(\n            'button', 'is-info', {\n              'is-light': !isNameSelected,\n            },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortByLength)}\n          type=\"button\"\n          className={cn(\n            'button', 'is-success', {\n              'is-light': !isLengthSelected,\n            },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => {\n            isReverseSelected = !isReverseSelected;\n            setReverseField(isReverseSelected\n              ? ReverseOrder\n              : DefaultOption);\n          }}\n          type=\"button\"\n          className={cn(\n            'button', 'is-warning', {\n              'is-light': !isReverseSelected,\n            },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField)\n          && (\n            <button\n              onClick={() => {\n                setSortField(DefaultOption);\n                setReverseField(DefaultOption);\n                isNameSelected = false;\n                isLengthSelected = false;\n                isReverseSelected = false;\n              }}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}